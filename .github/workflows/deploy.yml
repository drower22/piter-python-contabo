name: Deploy Piter to Contabo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for reference)
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          REPO_PAT: ${{ secrets.REPO_PAT }} # opcional
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          # Mantemos false para permitir fallback dentro do script
          script_stop: false
          command_timeout: 30m
          envs: REPO_PAT
          script: |
            set -euo pipefail
            set -x

            APP_DIR="/opt/piter-python-contabo"

            # URLs do repo
            REPO_HTTPS_PUBLIC="https://github.com/drower22/piter-python-contabo.git"
            REPO_HTTPS_TOKENED="https://x-access-token:${REPO_PAT}@github.com/drower22/piter-python-contabo.git"

            # Escolhe URL HTTPS de trabalho (com PAT se existir, senão pública)
            if [ -n "${REPO_PAT:-}" ]; then
              REPO_URL="${REPO_HTTPS_TOKENED}"
            else
              REPO_URL="${REPO_HTTPS_PUBLIC}"
            fi

            echo "--- Preparando diretório ${APP_DIR} ---"
            sudo mkdir -p "${APP_DIR}"
            sudo chown -R ${USER}:${USER} "${APP_DIR}" || true

            echo "--- Diagnóstico rápido de rede ---"
            ping -c 1 github.com || true
            nslookup github.com || true

            echo "--- Garantindo que APP_DIR é um repo válido ---"
            if [ -d "${APP_DIR}/.git" ]; then
              echo "Diretório possui .git"
            else
              if [ -d "${APP_DIR}" ] && [ "$(ls -A "${APP_DIR}" | wc -l)" -gt 0 ]; then
                echo "APP_DIR existe mas não é repo git. Limpando para reclonar..."
                rm -rf "${APP_DIR:?}/"* "${APP_DIR}/."* 2>/dev/null || true
              fi
              echo "Clonando repo inicial via HTTPS..."
              git clone --branch main "${REPO_URL}" "${APP_DIR}"
            fi

            cd "${APP_DIR}"

            echo "--- Forçando remote.origin para HTTPS válido ---"
            if git remote get-url origin >/dev/null 2>&1; then
              git remote set-url origin "${REPO_URL}"
            else
              git remote add origin "${REPO_URL}"
            fi
            git remote -v

            echo "--- Sincronizando repo (HTTPS) ---"
            # Tenta fetch; se falhar, re-clona como último recurso
            if git fetch --all; then
              echo "Fetch via HTTPS OK"
            else
              echo "Fetch via HTTPS falhou. Forçando re-clone limpo via HTTPS..."
              cd /
              rm -rf "${APP_DIR}"
              mkdir -p "${APP_DIR}"
              git clone --branch main "${REPO_URL}" "${APP_DIR}"
              cd "${APP_DIR}"
            fi

            echo "--- Resetando para origin/main ---"
            git reset --hard origin/main

            echo "--- Venv e dependências ---"
            if [ ! -d .venv ]; then
              python3 -m venv .venv
            fi
            . .venv/bin/activate
            python -m pip install -U pip
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              pip install fastapi uvicorn[standard] supabase python-dotenv requests pydantic
            fi
            deactivate

            echo "--- Reiniciando serviço ---"
            sudo systemctl daemon-reload
            sudo systemctl restart piter-api
            sleep 2
            sudo systemctl status piter-api --no-pager -n 50 || true

            echo "--- Testando health local ---"
            curl -sv http://127.0.0.1:8000/health || true

            echo "--- Recarregando Nginx ---"
            sudo nginx -t && sudo systemctl reload nginx || true
