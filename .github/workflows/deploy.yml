name: Deploy Piter to Contabo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for reference)
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          REPO_PAT: ${{ secrets.REPO_PAT }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          # Permite que comandos falhem sem abortar a sessão, para o fallback funcionar
          script_stop: false
          command_timeout: 30m
          envs: REPO_PAT
          script: |
            set -euo pipefail
            set -x

            APP_DIR="/opt/piter-python-contabo"
            REPO_SSH="git@github.com:drower22/piter-python-contabo.git"
            REPO_HTTPS="https://x-access-token:${REPO_PAT}@github.com/drower22/piter-python-contabo.git"

            echo "--- Preparando diretório ${APP_DIR} ---"
            sudo mkdir -p "${APP_DIR}"
            sudo chown -R ${USER}:${USER} "${APP_DIR}" || true

            echo "--- Configurando acesso ao GitHub ---"
            mkdir -p ~/.ssh && chmod 700 ~/.ssh
            ssh-keyscan -t ed25519 github.com >> ~/.ssh/known_hosts || true
            chmod 644 ~/.ssh/known_hosts || true

            echo "--- Diagnóstico rápido de rede ---"
            ping -c 1 github.com || true
            nslookup github.com || true

            echo "--- Garantindo que APP_DIR é um repo válido ---"
            if [ -d "${APP_DIR}/.git" ]; then
              echo "Diretório possui .git"
            else
              if [ -d "${APP_DIR}" ] && [ "$(ls -A "${APP_DIR}" | wc -l)" -gt 0 ]; then
                echo "APP_DIR existe mas não é repo git. Limpando para reclonar..."
                rm -rf "${APP_DIR:?}/"* "${APP_DIR}/."* 2>/dev/null || true
              fi
              echo "Clonando repo inicial..."
              if git clone --branch main "${REPO_SSH}" "${APP_DIR}"; then
                echo "Clone via SSH OK"
              elif [ -n "${REPO_PAT:-}" ]; then
                echo "SSH falhou, tentando HTTPS com PAT..."
                git clone --branch main "${REPO_HTTPS}" "${APP_DIR}" || exit 1
              else
                echo "ERRO: Não foi possível clonar (SSH falhou e REPO_PAT não definido)."
                exit 1
              fi
            fi

            cd "${APP_DIR}"

            echo "--- Forçando remote.origin para host válido antes do primeiro fetch ---"
            # Se a URL atual não contiver github.com, normalize para SSH
            if ! git remote get-url origin | grep -q 'github.com'; then
              git remote set-url origin "${REPO_SSH}"
            fi
            git remote -v

            echo "--- Sincronizando repo ---"
            if git fetch --all; then
              echo "Fetch via SSH OK"
            else
              echo "Fetch via SSH falhou. Tentando configurar HTTPS com PAT..."
              if [ -n "${REPO_PAT:-}" ]; then
                git remote set-url origin "${REPO_HTTPS}"
                git remote -v
                if git fetch --all; then
                  echo "Fetch via HTTPS OK"
                else
                  echo "Fetch via HTTPS falhou. Forçando re-clone limpo via HTTPS..."
                  cd /
                  rm -rf "${APP_DIR}"
                  mkdir -p "${APP_DIR}"
                  if git clone --branch main "${REPO_HTTPS}" "${APP_DIR}"; then
                    echo "Re-clone via HTTPS OK"
                  else
                    echo "ERRO: Re-clone via HTTPS falhou."
                    exit 1
                  fi
                  cd "${APP_DIR}"
                fi
              else
                echo "ERRO: REPO_PAT não definido, não é possível fallback para HTTPS."
                exit 1
              fi
            fi

            echo "--- Resetando para origin/main ---"
            git reset --hard origin/main

            echo "--- Venv e dependências ---"
            if [ ! -d .venv ]; then
              python3 -m venv .venv
            fi
            . .venv/bin/activate
            python -m pip install -U pip
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              pip install fastapi uvicorn[standard] supabase python-dotenv requests pydantic
            fi
            deactivate

            echo "--- Reiniciando serviço ---"
            sudo systemctl daemon-reload
            sudo systemctl restart piter-api
            sleep 2
            sudo systemctl status piter-api --no-pager -n 50 || true

            echo "--- Testando health local ---"
            curl -sv http://127.0.0.1:8000/health || true

            echo "--- Recarregando Nginx ---"
            sudo nginx -t && sudo systemctl reload nginx || true
